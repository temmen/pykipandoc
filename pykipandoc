#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# pykipandoc — xml-rpc-based ikiwiki plugin to process Pandoc files
#
# based on rst by martin f. krafft <madduck@madduck.net>
# Released under the terms of the GNU GPL version 2
#
__name__ = 'pandoc'
__description__ = 'xml-rpc-based ikiwiki plugin to process Pandoc\'s Markdown files'
__version__ = '0.1'
__author__ = 'Temistocle M. Mineo <temmenel@gmail.com>'
__copyright__ = 'Copyright © ' + __author__
__licence__ = 'GPLv2'

LANG = 'it_IT.utf-8'

from proxy import IkiWikiProcedureProxy
from subprocess import Popen, PIPE, STDOUT
import os
import sys

os.environ['LANG'] = LANG

def debug(s):
    sys.stderr.write(__name__ + ':DEBUG:%s\n' % s)
    sys.stderr.flush()

proxy = IkiWikiProcedureProxy(__name__, debug_fn=None)

def __arglist_to_dict(args):
    if len(args) % 2 != 0:
        raise ValueError, 'odd number of arguments, cannot convert to dict'
    return dict([args[i:i+2] for i in xrange(0, len(args), 2)])

def htmlize(proxy, *args):
    __doc__ = '''
    Runs on the raw source of a page and turns it into html. The id
    parameter specifies the filename extension that a file must have to be
    htmlized using this plugin. This is how you can add support for new and
    exciting markup languages to ikiwiki.
    
    The function is passed named parameters: "page" and "content" and should
    return the htmlized content.
'''
    kwargs = __arglist_to_dict(args)
    pid = Popen(
         ["/usr/bin/pandoc",
          "--smart",
          "--number-sections",
          "--id-prefix",
          "-t html",
         ],
         stdin=PIPE,
         stdout=PIPE,
         stderr=STDOUT
         )
    return pid.communicate(input=kwargs["content"])
proxy.hook('htmlize', htmlize, id="mdwn")    

def editcontent(proxy, *args):
    __doc__='''
    This hook is called when a page is saved (or previewed) using the web
    interface. It is passed named parameters: content, page, cgi, and
    session. These are, respectively, the new page content as entered by the
    user, the page name, a CGI object, and the user's CGI::Session.
    
    It can modify the content as desired, and should return the content.
'''
    kwargs = __arglist_to_dict(args)
#    debug("hook `editcontent' called with arguments %s" % kwargs)
    pid = Popen(
        ["/usr/bin/pandoc",
          "--smart",
          "--number-sections",
          "--id-prefix",
          "-t html",
         ],
         stdin=PIPE,
         stdout=PIPE,
         stderr=STDOUT
         )
    return pid.communicate(input=kwargs['content'])
proxy.hook('editcontent', editcontent)

# @TzuEND -- 2012, temmen.
proxy.run()
